name: Build Executables

on:
  push:
    tags:
      - 'v*'

# Adicionar permissões explícitas
permissions:
  contents: write  # Necessário para criar releases e fazer upload de assets

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download FFmpeg (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
        $ffmpegZip = "ffmpeg.zip"
        $ffmpegDir = "ffmpeg"
        
        Write-Host "Downloading FFmpeg..."
        Invoke-WebRequest -Uri $ffmpegUrl -OutFile $ffmpegZip
        
        Write-Host "Extracting FFmpeg..."
        Expand-Archive -Path $ffmpegZip -DestinationPath $ffmpegDir -Force
        
        # Get the path to ffmpeg.exe
        $ffmpegExe = Get-ChildItem -Path $ffmpegDir -Recurse -Filter "ffmpeg.exe" | Select-Object -First 1
        Write-Host "Found FFmpeg at: $($ffmpegExe.FullName)"
        echo "FFMPEG_PATH=$($ffmpegExe.FullName)" >> $env:GITHUB_OUTPUT
        
        # Verify FFmpeg works
        & $ffmpegExe.FullName -version
        if ($LASTEXITCODE -ne 0) {
            Write-Error "FFmpeg verification failed"
            exit 1
        }
    
    - name: Download FFmpeg (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz
        tar xf ffmpeg-master-latest-linux64-gpl.tar.xz
        FFMPEG_PATH=$(find . -name ffmpeg -type f -executable | head -n 1)
        echo "FFMPEG_PATH=$FFMPEG_PATH" >> $GITHUB_OUTPUT
        chmod +x "$FFMPEG_PATH"
        
        # Verify FFmpeg works
        "$FFMPEG_PATH" -version
        if [ $? -ne 0 ]; then
            echo "FFmpeg verification failed"
            exit 1
        fi
    
    - name: Download FFmpeg (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        wget https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip
        unzip ffmpeg-6.1.zip
        echo "FFMPEG_PATH=$(pwd)/ffmpeg" >> $GITHUB_OUTPUT
        chmod +x ffmpeg
        
        # Verify FFmpeg works
        ./ffmpeg -version
        if [ $? -ne 0 ]; then
            echo "FFmpeg verification failed"
            exit 1
        fi
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $ffmpegPath = "${{ steps.ffmpeg_win.outputs.FFMPEG_PATH }}"
        Write-Host "Using FFmpeg from: $ffmpegPath"
        
        # Verify FFmpeg exists
        if (-not (Test-Path $ffmpegPath)) {
            Write-Error "FFmpeg not found at: $ffmpegPath"
            exit 1
        }
        
        # Build with PyInstaller
        Write-Host "Building executable with PyInstaller..."
        pyinstaller --onefile --name yt-mp3-downloader --add-binary "$ffmpegPath;ffmpeg.exe" main.py
        
        # Verify executable was created
        if (-not (Test-Path "dist/yt-mp3-downloader.exe")) {
            Write-Error "Executable was not created"
            exit 1
        }
        
        # Verify executable size (should be large enough to include FFmpeg)
        $exeSize = (Get-Item "dist/yt-mp3-downloader.exe").Length
        Write-Host "Executable size: $exeSize bytes"
        if ($exeSize -lt 1MB) {
            Write-Error "Executable seems too small to include FFmpeg"
            exit 1
        }
        
        # Create a test directory and try to run the executable
        $testDir = "test_run"
        New-Item -ItemType Directory -Force -Path $testDir
        Copy-Item "dist/yt-mp3-downloader.exe" -Destination $testDir
        Set-Location $testDir
        
        Write-Host "Testing executable..."
        ./yt-mp3-downloader.exe --help
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Executable test failed"
            exit 1
        }
    
    - name: Build executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Building executable with PyInstaller..."
        pyinstaller --onefile --name yt-mp3-downloader --add-binary "${{ steps.ffmpeg_unix.outputs.FFMPEG_PATH }}:ffmpeg" main.py
        
        # Verify executable was created
        if [ ! -f "dist/yt-mp3-downloader" ]; then
            echo "Executable was not created"
            exit 1
        fi
        
        # Verify executable size
        exe_size=$(stat -f%z "dist/yt-mp3-downloader")
        echo "Executable size: $exe_size bytes"
        if [ $exe_size -lt 1000000 ]; then
            echo "Executable seems too small to include FFmpeg"
            exit 1
        fi
        
        # Test the executable
        echo "Testing executable..."
        ./dist/yt-mp3-downloader --help
        if [ $? -ne 0 ]; then
            echo "Executable test failed"
            exit 1
        fi
    
    - name: Make executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x dist/yt-mp3-downloader
    
    - name: Create release assets (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Move-Item -Path "dist/yt-mp3-downloader.exe" -Destination "dist/yt-mp3-downloader-windows.exe"
    
    - name: Create release assets (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          mv dist/yt-mp3-downloader dist/yt-mp3-downloader-macos
        else
          mv dist/yt-mp3-downloader dist/yt-mp3-downloader-linux
        fi
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/yt-mp3-downloader-*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 